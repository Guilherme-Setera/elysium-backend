name: Deploy Elysium Backend (VPS)

on:
  push:
    branches: ["main"]
    paths:
      - "Dockerfile"
      - "docker-compose.yml"
      - "src/**"
      - "requirements.txt"
      - "main.py"
      - ".github/workflows/deploy.yml"
  workflow_dispatch:

concurrency:
  group: deploy-elysium-vps
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Write SSH key
        shell: bash
        run: |
          umask 077
          (echo "${{ secrets.VPS_SSH_KEY }}" | base64 -d > ./hostinger_ci) 2>/dev/null || printf '%s' "${{ secrets.VPS_SSH_KEY }}" > ./hostinger_ci
          chmod 600 ./hostinger_ci

      - name: Prepare known_hosts and test SSH
        shell: bash
        run: |
          install -m 700 -d ~/.ssh
          PORT="${{ secrets.VPS_PORT }}"; [ -z "$PORT" ] && PORT=22
          ssh-keyscan -p "$PORT" -H "${{ secrets.VPS_HOST }}" >> ~/.ssh/known_hosts
          ssh -i ./hostinger_ci -p "$PORT" -o StrictHostKeyChecking=yes "${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}" "echo connected"

      - name: SSH into VPS and deploy
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          port: ${{ secrets.VPS_PORT }}
          key_path: ./hostinger_ci
          debug: true
          script_stop: true
          script: |
            set -euo pipefail
            docker --version || true
            docker compose version || true

            WORKDIR="${{ secrets.VPS_WORKDIR || format('{0}', '$HOME/elysium-backend') }}"
            mkdir -p "$WORKDIR"
            cd "$WORKDIR"

            git init -q . || true
            git remote remove origin >/dev/null 2>&1 || true
            git remote add origin "https://github.com/${{ github.repository }}" >/dev/null 2>&1 || true
            git fetch --prune --depth=1 origin main
            git checkout -B main origin/main

            cat > .env << 'EOF'
            ENVIRONMENT=${{ secrets.ENVIRONMENT }}
            POSTGRES_SERVER=db
            POSTGRES_PORT=5432
            POSTGRES_DATABASE=${{ secrets.POSTGRES_DATABASE }}
            POSTGRES_USERNAME=${{ secrets.POSTGRES_USERNAME }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            POSTGRES_SSLMODE=${{ secrets.POSTGRES_SSLMODE }}
            JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
            JWT_REFRESH_SECRET_KEY=${{ secrets.JWT_REFRESH_SECRET_KEY }}
            JWT_REFRESH_TOKEN_EXPIRE_DAYS=${{ secrets.JWT_REFRESH_TOKEN_EXPIRE_DAYS }}
            ORIGINS=${{ secrets.ORIGINS }}
            PORT=${{ secrets.PORT }}
            WEB_CONCURRENCY=${{ secrets.WEB_CONCURRENCY }}
            EOF

            cat > .env.db << 'EOF'
            POSTGRES_USER=${{ secrets.POSTGRES_USERNAME }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            POSTGRES_DB=${{ secrets.POSTGRES_DATABASE }}
            EOF

            docker info >/dev/null 2>&1 || { echo "Docker indisponível"; exit 1; }
            docker compose build --no-cache
            docker compose up -d --remove-orphans
            docker compose ps || true

            echo "Aguardando Postgres ficar healthy..."
            ATTEMPTS=40
            SLEEP=2
            i=1
            until [ "$(docker inspect -f '{{if .State.Health}}{{.State.Health.Status}}{{else}}starting{{end}}' elysium-postgres 2>/dev/null || echo starting)" = "healthy" ]; do
              echo "tentativa $i/$ATTEMPTS"
              i=$((i+1))
              if [ $i -gt $ATTEMPTS ]; then
                echo "Postgres não ficou healthy a tempo."
                docker compose ps || true
                docker compose logs --no-color --tail=200 db || true
                exit 1
              fi
              sleep $SLEEP
            done
            echo "Postgres healthy."

            echo "Aguardando /health do app..."
            ATTEMPTS=30
            SLEEP=2
            i=1
            HEALTH_URL="${{ secrets.HEALTH_URL }}"
            [ -n "${HEALTH_URL}" ] || HEALTH_URL="http://127.0.0.1:8080/health"
            until curl -fsS "$HEALTH_URL" >/dev/null; do
              echo "tentativa $i/$ATTEMPTS"
              i=$((i+1))
              if [ $i -gt $ATTEMPTS ]; then
                echo "App não respondeu no tempo esperado."
                docker compose ps || true
                docker compose logs --no-color --tail=200 app || true
                exit 1
              fi
              sleep $SLEEP
            done
            echo "App healthy."

      - name: Done
        run: echo "Deploy finalizado com sucesso."
