name: Deploy Elysium Backend (VPS)

on:
  push:
    branches: ["main"]
    paths:
      - "Dockerfile"
      - "docker-compose.yml"
      - "src/**"
      - "requirements.txt"
      - "main.py"
      - ".github/workflows/deploy.yml"
  workflow_dispatch:

concurrency:
  group: deploy-elysium-vps
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (apenas para visibilidade do run)
        uses: actions/checkout@v4

      - name: Write SSH key
        shell: bash
        run: |
          umask 077
          # aceita secret puro ou base64
          (echo "${{ secrets.VPS_SSH_KEY }}" | base64 -d > hostinger_ci) 2>/dev/null || printf '%s' "${{ secrets.VPS_SSH_KEY }}" > hostinger_ci
          chmod 600 hostinger_ci

      - name: Prepare known_hosts and test SSH
        shell: bash
        run: |
          install -m 700 -d ~/.ssh
          PORT="${{ secrets.VPS_PORT }}"; [ -z "$PORT" ] && PORT=22
          ssh-keyscan -p "$PORT" -H "${{ secrets.VPS_HOST }}" >> ~/.ssh/known_hosts
          ssh -i ./hostinger_ci -p "$PORT" -o StrictHostKeyChecking=yes "${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}" "echo connected"

      - name: SSH & Deploy
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          port: ${{ secrets.VPS_PORT }}
          key_path: ./hostinger_ci
          script_stop: true
          debug: true
          script: |
            set -euo pipefail

            WORKDIR="${{ secrets.VPS_WORKDIR }}"
            if [ -z "${WORKDIR}" ]; then WORKDIR="$HOME/elysium-backend"; fi
            mkdir -p "$WORKDIR"
            cd "$WORKDIR"

            echo "[1/6] Sync repo para main (hard reset)"
            if [ ! -d .git ]; then
              git init -q
              git remote add origin "https://github.com/${{ github.repository }}.git"
            fi
            git fetch --no-tags --prune --depth=1 origin main
            git reset --hard origin/main
            git clean -fdx

            echo "[2/6] Escrever .env do app (apenas variáveis do app)"
            cat > .env <<'ENV'
            ENVIRONMENT=${{ secrets.ENVIRONMENT || 'production' }}
            PORT=${{ secrets.PORT || '8080' }}
            WEB_CONCURRENCY=${{ secrets.WEB_CONCURRENCY || '2' }}
            ORIGINS=${{ secrets.ORIGINS || '["https://elysium-fronted.vercel.app","http://localhost:3000"]' }}

            POSTGRES_SERVER=db
            POSTGRES_PORT=5432
            POSTGRES_DATABASE=${{ secrets.POSTGRES_DATABASE || 'elysiumdb' }}
            POSTGRES_USERNAME=${{ secrets.POSTGRES_USERNAME || 'elysium' }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            POSTGRES_SSLMODE=${{ secrets.POSTGRES_SSLMODE || 'disable' }}

            JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
            JWT_REFRESH_SECRET_KEY=${{ secrets.JWT_REFRESH_SECRET_KEY }}
            JWT_REFRESH_TOKEN_EXPIRE_DAYS=${{ secrets.JWT_REFRESH_TOKEN_EXPIRE_DAYS || '7' }}
            ENV

            echo "[3/6] Validar docker-compose.yml"
            docker compose config >/dev/null

            echo "[4/6] Build e recriar containers"
            docker compose down --remove-orphans || true
            docker compose build --pull
            docker compose up -d --force-recreate
            docker compose ps

            echo "[5/6] Esperar Postgres responder (pg_isready dentro do container)"
            ATTEMPTS=60
            i=1
            while ! docker compose exec -T db sh -lc 'pg_isready -h 127.0.0.1 -p 5432' >/dev/null 2>&1; do
              echo "  tentativa $i/$ATTEMPTS..."
              i=$((i+1))
              if [ $i -gt $ATTEMPTS ]; then
                echo "Postgres não respondeu a tempo."
                docker compose logs --no-color --tail=200 db || true
                exit 1
              fi
              sleep 2
            done
            echo "Postgres OK."

            echo "[6/6] Healthcheck do app (rota existente)"
            HEALTH_URL="${{ secrets.HEALTH_URL }}"
            if [ -z "$HEALTH_URL" ]; then HEALTH_URL="http://127.0.0.1:8080/api/infra/health"; fi

            ATTEMPTS=30
            i=1
            while ! curl -fsS "$HEALTH_URL" >/dev/null 2>&1; do
              echo "  tentativa $i/$ATTEMPTS..."
              i=$((i+1))
              if [ $i -gt $ATTEMPTS ]; then
                echo "App não respondeu a tempo."
                echo "Logs do app:"
                docker compose logs --no-color --tail=200 app || true
                echo "Tente checar também /openapi.json localmente:"
                curl -v http://127.0.0.1:8080/openapi.json || true
                exit 1
              fi
              sleep 2
            done
            echo "App OK."

      - name: Done
        run: echo "Deploy finalizado com sucesso."
