name: Deploy Elysium Backend (VPS)

on:
  push:
    branches: [ "main" ]
    paths:
      - "Dockerfile"
      - "docker-compose.yml"
      - "src/**"
      - "requirements.txt"
      - "main.py"
      - ".github/workflows/deploy.yml"
  workflow_dispatch:

concurrency:
  group: deploy-elysium-vps
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Write SSH key
        shell: bash
        run: |
          umask 077
          (echo "${{ secrets.VPS_SSH_KEY }}" | base64 -d > ./hostinger_ci) 2>/dev/null || \
          printf '%s' "${{ secrets.VPS_SSH_KEY }}" > ./hostinger_ci
          chmod 600 ./hostinger_ci

      - name: Prepare known_hosts and test SSH
        shell: bash
        run: |
          install -m 700 -d ~/.ssh
          PORT="${{ secrets.VPS_PORT || 22 }}"
          ssh-keyscan -p "$PORT" -H "${{ secrets.VPS_HOST }}" >> ~/.ssh/known_hosts
          ssh -i ./hostinger_ci -p "$PORT" -o StrictHostKeyChecking=yes \
            "${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}" "echo connected"

      - name: SSH into VPS and deploy (idempotent + no nonzero lines)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          port: ${{ secrets.VPS_PORT }}
          key_path: ./hostinger_ci
          debug: true
          script_stop: true
          script: |
            set -euo pipefail

            # 0) Contexto
            echo "USER=$(id -u -n) UID=$(id -u) HOME=$HOME"
            docker --version || true
            docker compose version || true

            # 1) Workdir
            WORKDIR="$HOME/elysium-backend"
            mkdir -p "$WORKDIR"
            cd "$WORKDIR"
            stat -c "workdir_owner=%U:%G perms=%A path=%n" . || true

            # 2) Git sync SEM linhas que retornem 1
            git init -q . || true
            git remote remove origin >/dev/null 2>&1 || true
            git remote add origin "https://github.com/${{ github.repository }}" >/dev/null 2>&1 || true
            git fetch --depth=1 origin main || true
            # Se fetch não trouxe main (repo vazio?), cria branch vazia para não falhar
            git checkout -B main || true
            git reset --hard origin/main >/dev/null 2>&1 || true
            git rev-parse --short HEAD || true

            # 3) .env.production
            cat > .env << 'EOF'
            ENVIRONMENT=${{ secrets.ENVIRONMENT }}
            POSTGRES_SERVER=${{ secrets.POSTGRES_SERVER }}
            POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}
            POSTGRES_DATABASE=${{ secrets.POSTGRES_DATABASE }}
            POSTGRES_USERNAME=${{ secrets.POSTGRES_USERNAME }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            POSTGRES_SSLMODE=${{ secrets.POSTGRES_SSLMODE }}
            JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
            JWT_REFRESH_SECRET_KEY=${{ secrets.JWT_REFRESH_SECRET_KEY }}
            JWT_REFRESH_TOKEN_EXPIRE_DAYS=${{ secrets.JWT_REFRESH_TOKEN_EXPIRE_DAYS }}
            ORIGINS=${{ secrets.ORIGINS }}
            PORT=${{ secrets.PORT }}
            WEB_CONCURRENCY=${{ secrets.WEB_CONCURRENCY }}
            EOF
            ls -l .env.production || true
            wc -c .env.production || true

            # 4) Docker Compose
            docker info >/dev/null 2>&1 || { echo "Sem acesso ao Docker. Verifique grupo 'docker' e daemon ativo."; exit 1; }
            docker compose pull || true
            docker compose build --no-cache
            docker compose up -d --remove-orphans
            docker compose ps || true

            # 5) Healthcheck (ajuste se sua app usa outra porta/rota)
            HEALTH_URL="${{ secrets.HEALTH_URL }}"
            [ -n "$HEALTH_URL" ] || HEALTH_URL="http://127.0.0.1:8080/health"
            if ! curl -fsS "$HEALTH_URL" >/dev/null; then
              echo "[WARN] Health falhou em $HEALTH_URL — tentando alternativas…"
              curl -fsS http://localhost:8080/health >/dev/null || true
              curl -fsS http://0.0.0.0:8080/health >/dev/null || true
              echo "[INFO] Últimos logs:"
              docker compose logs --no-color --tail=200 || true
              exit 1
            fi

            echo "[DONE] Deploy concluído com sucesso."

      - name: Done
        run: echo "Deploy finalizado com sucesso."
