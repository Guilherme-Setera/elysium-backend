name: Deploy Elysium Backend (VPS)

on:
  push:
    branches: [ "main" ]
    paths:
      - "Dockerfile"
      - "docker-compose.yml"
      - "src/**"
      - "requirements.txt"
      - "main.py"
      - ".github/workflows/deploy.yml"
  workflow_dispatch:

concurrency:
  group: deploy-elysium-vps
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare SSH folder
        shell: bash
        run: install -m 700 -d ~/.ssh

      - name: Write SSH key
        shell: bash
        run: |
          umask 077
          (echo "${{ secrets.VPS_SSH_KEY }}" | base64 -d > ~/.ssh/hostinger_ci) 2>/dev/null || \
          printf '%s' "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/hostinger_ci
          chmod 600 ~/.ssh/hostinger_ci

      - name: Show derived fingerprint
        shell: bash
        run: |
          head -n1 ~/.ssh/hostinger_ci
          tail -n1 ~/.ssh/hostinger_ci
          ssh-keygen -y -f ~/.ssh/hostinger_ci > ~/.ssh/hostinger_ci.pub
          ssh-keygen -lf ~/.ssh/hostinger_ci.pub

      - name: Add server to known_hosts
        shell: bash
        run: |
          PORT="${{ secrets.VPS_PORT || 22 }}"
          ssh-keyscan -p "$PORT" -H "${{ secrets.VPS_HOST }}" >> ~/.ssh/known_hosts

      - name: Test SSH
        shell: bash
        run: |
          PORT="${{ secrets.VPS_PORT || 22 }}"
          ssh -i ~/.ssh/hostinger_ci -p "$PORT" -o StrictHostKeyChecking=yes \
            "${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}" "echo connected"

      - name: SSH into VPS and deploy
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          port: ${{ secrets.VPS_PORT }}
          key_path: ~/.ssh/hostinger_ci
          debug: true
          script_stop: true
          script: |
            set -euo pipefail
            mkdir -p "${{ secrets.VPS_WORKDIR }}"
            cd "${{ secrets.VPS_WORKDIR }}"

            if [ -d ".git" ]; then
              git fetch --all --prune
              git reset --hard origin/main
            else
              git clone --depth=1 https://github.com/${{ github.repository }} .
              git checkout -f main
            fi

            cat > .env.production << 'EOF'
            ENVIRONMENT=${{ secrets.ENVIRONMENT }}
            POSTGRES_SERVER=${{ secrets.POSTGRES_SERVER }}
            POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}
            POSTGRES_DATABASE=${{ secrets.POSTGRES_DATABASE }}
            POSTGRES_USERNAME=${{ secrets.POSTGRES_USERNAME }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            POSTGRES_SSLMODE=${{ secrets.POSTGRES_SSLMODE }}
            JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
            JWT_REFRESH_SECRET_KEY=${{ secrets.JWT_REFRESH_SECRET_KEY }}
            JWT_REFRESH_TOKEN_EXPIRE_DAYS=${{ secrets.JWT_REFRESH_TOKEN_EXPIRE_DAYS }}
            ORIGINS=${{ secrets.ORIGINS }}
            PORT=${{ secrets.PORT }}
            WEB_CONCURRENCY=${{ secrets.WEB_CONCURRENCY }}
            EOF

            docker compose pull || true
            docker compose build --no-cache
            docker compose up -d --remove-orphans
            docker image prune -f
            curl -fsS http://127.0.0.1:8080/health || (echo "Healthcheck FAIL" && exit 1)

      - name: Done
        run: echo "Deploy finalizado com sucesso."
