name: Deploy Elysium Backend (VPS)

on:
  push:
    branches: [ "main" ]
    paths:
      - "Dockerfile"
      - "docker-compose.yml"
      - "src/**"
      - "requirements.txt"
      - "main.py"
      - ".github/workflows/deploy.yml"
  workflow_dispatch:

concurrency:
  group: deploy-elysium-vps
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Write SSH key
        shell: bash
        run: |
          umask 077
          (echo "${{ secrets.VPS_SSH_KEY }}" | base64 -d > ./hostinger_ci) 2>/dev/null || \
          printf '%s' "${{ secrets.VPS_SSH_KEY }}" > ./hostinger_ci
          chmod 600 ./hostinger_ci

      - name: Prepare known_hosts and test SSH
        shell: bash
        run: |
          install -m 700 -d ~/.ssh
          PORT="${{ secrets.VPS_PORT || 22 }}"
          ssh-keyscan -p "$PORT" -H "${{ secrets.VPS_HOST }}" >> ~/.ssh/known_hosts
          ssh -i ./hostinger_ci -p "$PORT" -o StrictHostKeyChecking=yes \
            "${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}" "echo connected"

      - name: SSH into VPS and deploy (robust)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          port: ${{ secrets.VPS_PORT }}
          key_path: ./hostinger_ci
          debug: true
          script_stop: true
          script: |
            set -Eeuo pipefail
            trap 'echo "[FAIL] step=${STEP:-unknown} line=$LINENO" >&2' ERR
            set -x

            STEP="env info"
            echo "USER=$(id -u -n) UID=$(id -u) HOME=$HOME"
            docker --version
            docker compose version

            STEP="resolve workdir"
            WORKDIR="$HOME/elysium-backend"
            mkdir -p "$WORKDIR"
            cd "$WORKDIR"
            stat -c "workdir_owner=%U:%G perms=%A path=%n" .

            STEP="git sync"
            set +e
            [ -d ".git" ]
            GITDIR_EXISTS=$?
            set -e
            if [ "$GITDIR_EXISTS" -eq 0 ]; then
              git fetch --all --prune
              git reset --hard origin/main
            else
              git clone --depth=1 https://github.com/${{ github.repository }} .
              git checkout -f main
            fi
            git rev-parse --short HEAD

            STEP="write env"
            cat > .env.production << 'EOF'
            ENVIRONMENT=${{ secrets.ENVIRONMENT }}
            POSTGRES_SERVER=${{ secrets.POSTGRES_SERVER }}
            POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}
            POSTGRES_DATABASE=${{ secrets.POSTGRES_DATABASE }}
            POSTGRES_USERNAME=${{ secrets.POSTGRES_USERNAME }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            POSTGRES_SSLMODE=${{ secrets.POSTGRES_SSLMODE }}
            JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
            JWT_REFRESH_SECRET_KEY=${{ secrets.JWT_REFRESH_SECRET_KEY }}
            JWT_REFRESH_TOKEN_EXPIRE_DAYS=${{ secrets.JWT_REFRESH_TOKEN_EXPIRE_DAYS }}
            ORIGINS=${{ secrets.ORIGINS }}
            PORT=${{ secrets.PORT }}
            WEB_CONCURRENCY=${{ secrets.WEB_CONCURRENCY }}
            EOF
            ls -l .env.production
            wc -c .env.production

            STEP="compose pull"
            docker compose pull || true

            STEP="compose build"
            docker compose build --no-cache

            STEP="compose up"
            docker compose up -d --remove-orphans
            docker compose ps

            STEP="healthcheck"
            HEALTH_URL="${{ secrets.HEALTH_URL }}"
            if [ -z "${HEALTH_URL}" ]; then
              HEALTH_URL="http://127.0.0.1:8080/health"
            fi
            if ! curl -fsS "$HEALTH_URL" >/dev/null; then
              echo "[WARN] Health falhou em $HEALTH_URL — tentando alternativas…"
              for u in http://localhost:8080/health http://0.0.0.0:8080/health; do
                curl -fsS "$u" >/dev/null && { echo "[OK] Health em $u"; exit 0; } || true
              done
              echo "[INFO] Últimos logs dos serviços:"
              docker compose logs --no-color --tail=200 || true
              exit 1
            fi

            echo "[DONE] Deploy concluído com sucesso."

      - name: Done
        run: echo "Deploy finalizado com sucesso."
